{
	"info": {
		"_postman_id": "837c1a00-1122-48ce-b56f-dec11950ac36",
		"name": "HEALY ⚕️",
		"description": "A fim de testes, usaresmos 4 pessoas (Matheus, Beatriz, Ana e Mirelly), sendo delas, 3 paciente e 1 médico.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33457018"
	},
	"item": [
		{
			"name": "Pessoa",
			"item": [
				{
					"name": "POST Benezinho ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.email).to.exist.and.to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
									"});",
									"",
									"",
									"pm.test(\"Nascimento is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/, \"Nascimento should be in the format 'YYYY-MM-DD'\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Benefrancis\",\r\n  \"email\": \"benefrancis@gmail.com\",\r\n  \"nascimento\": \"1980-04-05\",\r\n  \"tipo\": \"PC\",\r\n  \"cpf\": \"12345678999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/pessoa",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"pessoa"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Email is in a valid format', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.email).to.match(/\\S+@\\S+\\.\\S+/);",
									"    });",
									"})",
									"",
									"pm.test('Date of birth is in a valid date format', function () {",
									"    const responseData = pm.response.json();",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/pessoa",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"pessoa"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY ID ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"pm.test('Email is in a valid format', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.email).to.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/, 'Email is not in a valid format');",
									"})",
									"",
									"pm.test('Nascimento is in a valid date format', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/, 'Nascimento should be in the format YYYY-MM-DD');",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/pessoa/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"pessoa",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY nome ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in a valid format\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Nascimento is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function (item) {",
									"    pm.expect(item.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/, \"Nascimento should be in the format 'YYYY-MM-DD'\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/pessoa?nome=Benefrancis",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"pessoa"
							],
							"query": [
								{
									"key": "nome",
									"value": "Benefrancis"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY email ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in a valid format\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Nascimento is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function (item) {",
									"    pm.expect(item.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/, \"Nascimento should be in the format 'YYYY-MM-DD'\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/pessoa?email=benefrancis@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"pessoa"
							],
							"query": [
								{
									"key": "email",
									"value": "benefrancis@gmail.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY nascimento ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in a valid format\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Nascimento is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function (item) {",
									"    pm.expect(item.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/, \"Nascimento should be in the format 'YYYY-MM-DD'\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/pessoa?nascimento=2005-04-05",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"pessoa"
							],
							"query": [
								{
									"key": "nascimento",
									"value": "2005-04-05"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY sigla✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in a valid format\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Nascimento is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function (item) {",
									"    pm.expect(item.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/, \"Nascimento should be in the format 'YYYY-MM-DD'\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/pessoa?sigla=PC",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"pessoa"
							],
							"query": [
								{
									"key": "sigla",
									"value": "PC"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "TODOS FUNCIONAM!\n\nRestrições:\n\nÉ proibido cadastrar um mesmo e-mail mais de 1 vez.\n\nA data de nasciemento não pode ser cadastrada como depois do dia de hoje.\n\nA data de nasciemento é aceita no formato \"YYYY-MM-DD\""
		},
		{
			"name": "Documento",
			"item": [
				{
					"name": "POST doc-bene ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, estado, sigla, and numero\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('estado');",
									"    pm.expect(responseData).to.have.property('sigla');",
									"    pm.expect(responseData).to.have.property('numero');",
									"});",
									"",
									"",
									"pm.test(\"Id should be a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Estado and Sigla should be non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.estado).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Estado should be a non-empty string\");",
									"  pm.expect(responseData.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should be a non-empty string\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"estado\": \"RJ\",\r\n  \"sigla\": \"CRR\",\r\n  \"numero\": \"1122334455\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/documentos-de-saude",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"documentos-de-saude"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, estado, sigla, and numero\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('estado');",
									"        pm.expect(item).to.have.property('sigla');",
									"        pm.expect(item).to.have.property('numero');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify the response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/documentos-de-saude",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"documentos-de-saude"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY ID ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/documentos-de-saude/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"documentos-de-saude",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY estado ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Updated response time test to 300ms",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Presence of 'Content-Type' header in the response\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'Content-Type' header value is 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Ensure that the 'id', 'estado', 'sigla', and 'numero' fields are present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.id).to.exist;",
									"        pm.expect(item.estado).to.exist;",
									"        pm.expect(item.sigla).to.exist;",
									"        pm.expect(item.numero).to.exist;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Estado field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.estado).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Estado field should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Numero field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.numero).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/documentos-de-saude?estado=RJ",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"documentos-de-saude"
							],
							"query": [
								{
									"key": "estado",
									"value": "RJ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY sigla ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"",
									"",
									"pm.test(\"Response contains Content-Type header with value application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/documentos-de-saude?sigla=CRR",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"documentos-de-saude"
							],
							"query": [
								{
									"key": "sigla",
									"value": "CRR"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY numero ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(item => {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('estado');",
									"        pm.expect(item).to.have.property('sigla');",
									"        pm.expect(item).to.have.property('numero');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/documentos-de-saude?numero=1122334455",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"documentos-de-saude"
							],
							"query": [
								{
									"key": "numero",
									"value": "1122334455"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profissional da Saúde",
			"item": [
				{
					"name": "POST medico-bene ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"",
									"",
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('documento');",
									"    pm.expect(responseData).to.have.property('pessoa');",
									"    pm.expect(responseData).to.have.property('pacientes');",
									"});",
									"",
									"",
									"pm.test(\"Verify the presence of Content-Type header in the response\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"documento\":{\"id\":2},\r\n  \"pessoa\": {\"id\":5},\r\n  \"pacientes\": [{\"id\":2},{\"id\":3},{\"id\":1}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/profissional-saude",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"profissional-saude"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Response has the Content-Type header set to 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/profissional-saude",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"profissional-saude"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY ID ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/profissional-saude/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"profissional-saude",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY nome ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.to.have.status(200));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response has the content type header set to application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/profissional-saude?nome=Benefrancis",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"profissional-saude"
							],
							"query": [
								{
									"key": "nome",
									"value": "Benefrancis"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY cpf ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response has the content type header set to 'application/json'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"        pm.expect(item).to.have.property('documento');\r",
									"        pm.expect(item).to.have.property('pessoa');\r",
									"        pm.expect(item).to.have.property('pacientes');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/profissional-saude?cpf=12345678999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"profissional-saude"
							],
							"query": [
								{
									"key": "cpf",
									"value": "12345678999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY email ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within the acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate id, documento, and pessoa objects in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    \r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item.id).to.exist.and.to.be.a('number');\r",
									"        pm.expect(item.documento).to.exist.and.to.be.an('object');\r",
									"        pm.expect(item.pessoa).to.exist.and.to.be.an('object');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/profissional-saude?email=benefrancis@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"profissional-saude"
							],
							"query": [
								{
									"key": "email",
									"value": "benefrancis@gmail.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY doc.sigla ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.to.have.status(200));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the content type header of 'application/json'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/profissional-saude?documento.sigla=CRR",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"profissional-saude"
							],
							"query": [
								{
									"key": "documento.sigla",
									"value": "CRR"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY doc.estado ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');\r",
									"        \r",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/profissional-saude?documento.estado=RJ",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"profissional-saude"
							],
							"query": [
								{
									"key": "documento.estado",
									"value": "RJ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY doc.numero ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');\r",
									"        \r",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/profissional-saude?documento.numero=1122334455",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"profissional-saude"
							],
							"query": [
								{
									"key": "documento.numero",
									"value": "1122334455"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Exames",
			"item": [
				{
					"name": "POST exame-bene ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Pessoa object must exist and be an object\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.pessoa).to.exist.and.to.be.an('object');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"sexo\": \"M\",\r\n  \"idade\": 44,\r\n  \"histDiabetes\": false,\r\n  \"histDoencaCoronaria\": false,\r\n  \"histDoencaVascular\": false,\r\n  \"histFumo\": false,\r\n  \"histHipertensao\": false,\r\n  \"histDislipidemia\": false,\r\n  \"histObesidade\": false,\r\n  \"remDislipidemia\": false,\r\n  \"remDiabetes\": false,\r\n  \"remHipertensao\": false,\r\n  \"remACEIeARB\": false,\r\n  \"nvlColesterol\": 10,\r\n  \"nvlCreatina\": 20,\r\n  \"exameGFRB\": 30,\r\n  \"presSistolica\": 40,\r\n  \"presDiastolica\": 50,\r\n  \"indiceMassa\": 60,\r\n  \"mesAteCrise\": 70,\r\n  \"anoAteCrise\": 8,\r\n  \"pessoa\": {\"id\":5}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/exames",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"exames"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"        ",
									"        if (item.pacientes) {",
									"            item.pacientes.forEach(function(paciente) {",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"            });",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');",
									"        ",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/exames",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"exames"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY ID ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/exames/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"exames",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY sexo ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"        ",
									"        if (item.pacientes) {",
									"            item.pacientes.forEach(function(paciente) {",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"            });",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');",
									"        ",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/exames?sexo=M",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"exames"
							],
							"query": [
								{
									"key": "sexo",
									"value": "M"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY idade ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"        ",
									"        if (item.pacientes) {",
									"            item.pacientes.forEach(function(paciente) {",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"            });",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');",
									"        ",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/exames?idade=44",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"exames"
							],
							"query": [
								{
									"key": "idade",
									"value": "44"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY indiceMassa ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"        ",
									"        if (item.pacientes) {",
									"            item.pacientes.forEach(function(paciente) {",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"            });",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');",
									"        ",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/exames?indiceMassa=60",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"exames"
							],
							"query": [
								{
									"key": "indiceMassa",
									"value": "60"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY mesAteCrise ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"        ",
									"        if (item.pacientes) {",
									"            item.pacientes.forEach(function(paciente) {",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"            });",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');",
									"        ",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/exames?mesAteCrise=70",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"exames"
							],
							"query": [
								{
									"key": "mesAteCrise",
									"value": "70"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY anoAteCrise ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"        ",
									"        if (item.pacientes) {",
									"            item.pacientes.forEach(function(paciente) {",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"            });",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');",
									"        ",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/exames?anoAteCrise=8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"exames"
							],
							"query": [
								{
									"key": "anoAteCrise",
									"value": "8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY pessoa.nome ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"        ",
									"        if (item.pacientes) {",
									"            item.pacientes.forEach(function(paciente) {",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"            });",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');",
									"        ",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/exames?pessoa.nome=Benefrancis",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"exames"
							],
							"query": [
								{
									"key": "pessoa.nome",
									"value": "Benefrancis"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY pessoa.email ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"        ",
									"        if (item.pacientes) {",
									"            item.pacientes.forEach(function(paciente) {",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"            });",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');",
									"        ",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/exames?pessoa.email=benefrancis@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"exames"
							],
							"query": [
								{
									"key": "pessoa.email",
									"value": "benefrancis@gmail.com"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Telefone",
			"item": [
				{
					"name": "POST telefone-bene ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Id field is present and a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Pessoa object schema validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.pessoa).to.be.an('object');",
									"    pm.expect(responseData.pessoa.id).to.be.a('number');",
									"    pm.expect(responseData.pessoa.nome).to.be.a('string');",
									"    pm.expect(responseData.pessoa.email).to.be.a('string');",
									"    pm.expect(responseData.pessoa.nascimento).to.be.a('string');",
									"    pm.expect(responseData.pessoa.tipoPessoa).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ddi\": \"55\",\r\n  \"ddd\": \"11\",\r\n  \"numero\": \"999998888\",\r\n  \"pessoa\": {\"id\":5}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/telefone",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"telefone"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"        ",
									"        if (item.pacientes) {",
									"            item.pacientes.forEach(function(paciente) {",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"            });",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');",
									"        ",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/telefone",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"telefone"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY ID ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Id, ddi, ddd, and numero fields are present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.exist;",
									"  pm.expect(responseData.ddi).to.exist;",
									"  pm.expect(responseData.ddd).to.exist;",
									"  pm.expect(responseData.numero).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Pessoa object has expected fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.pessoa).to.be.an('object');",
									"    pm.expect(responseData.pessoa).to.have.property('id');",
									"    pm.expect(responseData.pessoa).to.have.property('nome');",
									"    pm.expect(responseData.pessoa).to.have.property('email');",
									"    pm.expect(responseData.pessoa).to.have.property('nascimento');",
									"    pm.expect(responseData.pessoa).to.have.property('tipoPessoa');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/telefone/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"telefone",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY ddi ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"        ",
									"        if (item.pacientes) {",
									"            item.pacientes.forEach(function(paciente) {",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"            });",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');",
									"        ",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/telefone?ddi=55",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"telefone"
							],
							"query": [
								{
									"key": "ddi",
									"value": "55"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY ddd ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"        ",
									"        if (item.pacientes) {",
									"            item.pacientes.forEach(function(paciente) {",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"            });",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');",
									"        ",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/telefone?ddd=11",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"telefone"
							],
							"query": [
								{
									"key": "ddd",
									"value": "11"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY numero ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"        ",
									"        if (item.pacientes) {",
									"            item.pacientes.forEach(function(paciente) {",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"            });",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');",
									"        ",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/telefone?numero=999998888",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"telefone"
							],
							"query": [
								{
									"key": "numero",
									"value": "999998888"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY pessoa.nome ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"        ",
									"        if (item.pacientes) {",
									"            item.pacientes.forEach(function(paciente) {",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"            });",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');",
									"        ",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/telefone?pessoa.nome=Benefrancis",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"telefone"
							],
							"query": [
								{
									"key": "pessoa.nome",
									"value": "Benefrancis"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Usuario",
			"item": [
				{
					"name": "POST usuario-bene ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Id field is present and a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, user, pessoa\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('user');",
									"    pm.expect(responseData).to.have.property('pessoa');",
									"});",
									"",
									"",
									"pm.test(\"User is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.user).to.be.a('string').and.to.have.lengthOf.at.least(1, \"User should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Pessoa object contains expected fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.pessoa).to.be.an('object');",
									"  pm.expect(responseData.pessoa).to.have.property('id');",
									"  pm.expect(responseData.pessoa).to.have.property('nome');",
									"  pm.expect(responseData.pessoa).to.have.property('email');",
									"  pm.expect(responseData.pessoa).to.have.property('nascimento');",
									"  pm.expect(responseData.pessoa).to.have.property('tipoPessoa');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user\": \"Benezinho\",\r\n  \"senha\": \"Matheus@1\",\r\n  \"pessoa\": {\"id\":5}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/usuario",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"usuario"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"        ",
									"        if (item.pacientes) {",
									"            item.pacientes.forEach(function(paciente) {",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"            });",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');",
									"        ",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/usuario",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"usuario"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY ID ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/usuario/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"usuario",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY user ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"        ",
									"        if (item.pacientes) {",
									"            item.pacientes.forEach(function(paciente) {",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"            });",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/usuario?usuario=Benefrancis",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"usuario"
							],
							"query": [
								{
									"key": "usuario",
									"value": "Benefrancis"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY nome ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"        ",
									"        if (item.pacientes) {",
									"            item.pacientes.forEach(function(paciente) {",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"            });",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');",
									"        ",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/usuario?pessoa.nome=Matheus",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"usuario"
							],
							"query": [
								{
									"key": "pessoa.nome",
									"value": "Matheus"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY pessoa.email ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"        ",
									"        if (item.pacientes) {",
									"            item.pacientes.forEach(function(paciente) {",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"            });",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');",
									"        ",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/usuario?pessoa.email=benefrancis@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"usuario"
							],
							"query": [
								{
									"key": "pessoa.email",
									"value": "benefrancis@gmail.com"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}