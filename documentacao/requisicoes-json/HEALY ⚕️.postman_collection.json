{
	"info": {
		"_postman_id": "837c1a00-1122-48ce-b56f-dec11950ac36",
		"name": "HEALY ⚕️",
		"description": "A fim de testes, usaresmos 4 pessoas (Matheus, Beatriz, Ana e Mirelly), sendo delas, 3 paciente e 1 médico.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33457018"
	},
	"item": [
		{
			"name": "Pessoa",
			"item": [
				{
					"name": "POST Matheus ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.nome).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.email).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.nascimento).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.telefone).to.exist.and.to.be.a('string');",
									"});",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.email).to.exist.and.to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
									"});",
									"",
									"",
									"pm.test(\"Nascimento is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/, \"Nascimento should be in the format 'YYYY-MM-DD'\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Matheus Felipe Camarinha Duarte\",\r\n  \"email\": \"matheus.duarte.lins@gmail.com\",\r\n  \"nascimento\": \"2005-04-05\",\r\n  \"telefone\": \"+55 11 991512776\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/pessoa",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"pessoa"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Ana ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.nome).to.exist;",
									"    pm.expect(responseData.email).to.exist;",
									"    pm.expect(responseData.nascimento).to.exist;",
									"    pm.expect(responseData.telefone).to.exist;",
									"})",
									"",
									"pm.test('Email is in a valid format', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b/, 'Email is not in a valid format');",
									"})",
									"",
									"pm.test('Nascimento is in a valid date format', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Ana Luiza\",\r\n  \"email\": \"ana.luiza@gmail.com\",\r\n  \"nascimento\": \"2005-04-17\",\r\n  \"telefone\": \"+55 11 997723882\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/pessoa",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"pessoa"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Beatriz ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.nome).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.email).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.nascimento).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.telefone).to.exist.and.to.be.a('string');",
									"})",
									"",
									"pm.test('Email is in a valid format', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, 'Email is not in a valid format');",
									"})",
									"",
									"pm.test('Nascimento is in a valid date format', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/, 'Nascimento should be in the format yyyy-mm-dd');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Beatriz Fon\",\r\n  \"email\": \"beatriz@gmail.com\",\r\n  \"nascimento\": \"2005-03-18\",\r\n  \"telefone\": \"+55 11 969306395\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/pessoa",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"pessoa"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Mirelly ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.nome).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.email).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.nascimento).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.telefone).to.exist.and.to.be.a('string');",
									"})",
									"",
									"pm.test('Email is in a valid format', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, 'Email should be in a valid format');",
									"})",
									"",
									"pm.test('The id must be a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Mirelly Azevedo\",\r\n  \"email\": \"mirelly@gmail.com\",\r\n  \"nascimento\": \"2005-03-18\",\r\n  \"telefone\": \"+55 11 958387172\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/pessoa",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"pessoa"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Email is in a valid format', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.email).to.match(/\\S+@\\S+\\.\\S+/);",
									"    });",
									"})",
									"",
									"pm.test('Date of birth is in a valid date format', function () {",
									"    const responseData = pm.response.json();",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/pessoa",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"pessoa"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY ID ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.nome).to.exist;",
									"    pm.expect(responseData.email).to.exist;",
									"    pm.expect(responseData.nascimento).to.exist;",
									"    pm.expect(responseData.telefone).to.exist;",
									"})",
									"",
									"pm.test('Email is in a valid format', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.email).to.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/, 'Email is not in a valid format');",
									"})",
									"",
									"pm.test('Nascimento is in a valid date format', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/, 'Nascimento should be in the format YYYY-MM-DD');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/pessoa/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"pessoa",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY nascimento ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"  ",
									"  responseData.forEach(function (item) {",
									"    pm.expect(item).to.have.property('id');",
									"    pm.expect(item).to.have.property('nome');",
									"    pm.expect(item).to.have.property('email');",
									"    pm.expect(item).to.have.property('nascimento');",
									"    pm.expect(item).to.have.property('telefone');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in a valid format\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Nascimento is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function (item) {",
									"    pm.expect(item.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/, \"Nascimento should be in the format 'YYYY-MM-DD'\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/pessoa?nascimento=2005-03-18",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"pessoa"
							],
							"query": [
								{
									"key": "nascimento",
									"value": "2005-03-18"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "TODOS FUNCIONAM!\n\nRestrições:\n\nÉ proibido cadastrar um mesmo e-mail mais de 1 vez.\n\nA data de nasciemento não pode ser cadastrada como depois do dia de hoje.\n\nA data de nasciemento é aceita no formato \"YYYY-MM-DD\""
		},
		{
			"name": "Histórico Médico",
			"item": [
				{
					"name": "POST hist-1 ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.doencas).to.exist;",
									"    pm.expect(responseData.doencasAnteriores).to.exist;",
									"    pm.expect(responseData.alergias).to.exist;",
									"    pm.expect(responseData.medicamento).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.id).to.be.at.least(0, \"Id should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"doencas\": \"Cancer\",\r\n  \"doencasAnteriores\": \"Gripe\",\r\n  \"alergias\": \"Nenhuma\",\r\n  \"medicamento\": \"isotretinoina\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/historico-medico",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"historico-medico"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST hist-2 ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.exist;",
									"  pm.expect(responseData.doencas).to.exist;",
									"  pm.expect(responseData.doencasAnteriores).to.exist;",
									"  pm.expect(responseData.alergias).to.exist;",
									"  pm.expect(responseData.medicamento).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.exist.and.to.be.a('number').and.to.be.at.least(0, \"Id should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Doencas should be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.doencas).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"doencas\": \"Virose\",\r\n  \"doencasAnteriores\": \"Gripe\",\r\n  \"alergias\": \"Nenhuma\",\r\n  \"medicamento\": \"Nenhuma\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/historico-medico",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"historico-medico"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST hist-3 ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.doencas).to.exist;",
									"    pm.expect(responseData.doencasAnteriores).to.exist;",
									"    pm.expect(responseData.alergias).to.exist;",
									"    pm.expect(responseData.medicamento).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'id' field is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.id).to.be.a('number');",
									"  pm.expect(responseData.id).to.be.at.least(0, \"Value should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'doencas' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.doencas).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"doencas\": \"Virose\",\r\n  \"doencasAnteriores\": \"Peneumonia\",\r\n  \"alergias\": \"Amendoim\",\r\n  \"medicamento\": \"isotretinoina\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/historico-medico",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"historico-medico"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"  ",
									"  responseData.forEach(function(item) {",
									"    pm.expect(item).to.have.property('id');",
									"    pm.expect(item).to.have.property('doencas');",
									"    pm.expect(item).to.have.property('doencasAnteriores');",
									"    pm.expect(item).to.have.property('alergias');",
									"    pm.expect(item).to.have.property('medicamento');",
									"  });",
									"});",
									"",
									"pm.test(\"Validate that the 'id' is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.id).to.be.a('number');",
									"        pm.expect(item.id).to.satisfy(function (id) {",
									"            return id >= 0;",
									"        }, \"Value should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Validate that 'doencas' is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('array');",
									"  pm.expect(responseData.length).to.be.above(0, \"Array should not be empty\");",
									"",
									"  responseData.forEach(function (item) {",
									"    pm.expect(item.doencas).to.be.a('string').and.to.have.lengthOf.at.least(1, \"'doencas' should not be empty\");",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/historico-medico",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"historico-medico"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY ID ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.exist;",
									"  pm.expect(responseData.doencas).to.exist;",
									"  pm.expect(responseData.doencasAnteriores).to.exist;",
									"  pm.expect(responseData.alergias).to.exist;",
									"  pm.expect(responseData.medicamento).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/historico-medico/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"historico-medico",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY doencas ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"id is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  ",
									"  responseData.forEach(function(item) {",
									"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"doencas should be a non-empty string\", function() {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.doencas).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/historico-medico?doecas=Virose",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"historico-medico"
							],
							"query": [
								{
									"key": "doecas",
									"value": "Virose"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY doencasAnteriores ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"DoencasAnteriores field value is 'Gripe'\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(data){",
									"        pm.expect(data.doencasAnteriores).to.equal(\"Gripe\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/historico-medico?doencasAnteriores=Gripe",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"historico-medico"
							],
							"query": [
								{
									"key": "doencasAnteriores",
									"value": "Gripe"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY alergias ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"  ",
									"  responseData.forEach(function (data) {",
									"    pm.expect(data).to.have.property('id');",
									"    pm.expect(data).to.have.property('doencas');",
									"    pm.expect(data).to.have.property('doencasAnteriores');",
									"    pm.expect(data).to.have.property('alergias');",
									"    pm.expect(data).to.have.property('medicamento');",
									"  });",
									"});",
									"",
									"pm.test(\"Alergias field should not be empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(item) {",
									"    pm.expect(item.alergias).to.exist.and.to.have.lengthOf.at.least(1, \"Alergias field should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the response is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the id is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(item){",
									"    pm.expect(item.id).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/historico-medico?alergias=Nenhuma",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"historico-medico"
							],
							"query": [
								{
									"key": "alergias",
									"value": "Nenhuma"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY medicamento ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'id' is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0, \"Value should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'medicamento' field is equal to 'isotretinoina'\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData[0].medicamento).to.equal(\"isotretinoina\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/historico-medico?medicamento=isotretinoina",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"historico-medico"
							],
							"query": [
								{
									"key": "medicamento",
									"value": "isotretinoina"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "TODOS FUNCIONAM!\n\nRestrições:\n\nNenhuma até então."
		},
		{
			"name": "Area Médica",
			"item": [
				{
					"name": "POST Cardiologia ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('nome');",
									"    pm.expect(responseData).to.have.property('descricao');",
									"});",
									"",
									"",
									"pm.test(\"id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Nome is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Descricao is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.descricao).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Cardiologia\",\r\n  \"descricao\": \"Área responsável por exames, tratamentos e cirugias que se referem ao coração\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/area-medica",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"area-medica"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Neurologia ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields - id, nome, and descricao\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.nome).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.descricao).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"Id should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Nome is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Descricao is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.descricao).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Neurologia\",\r\n  \"descricao\": \"Área responsável por exames, tratamentos e cirugias que se referem ao cérebro\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/area-medica",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"area-medica"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Dermatologista ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.nome).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.descricao).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.above(-1, \"Id should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Nome is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.nome).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Descricao is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.descricao).to.exist.and.to.be.a('string').and.to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Dermatologista\",\r\n  \"descricao\": \"Área responsável por exames, tratamentos e cirugias que se referem a pele\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/area-medica",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"area-medica"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Virologia ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.nome).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.descricao).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"ID is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Nome is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Descricao is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.descricao).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Virologia\",\r\n  \"descricao\": \"Área responsável por exames, tratamentos e cirugias que se referem a diferentes vírus\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/area-medica",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"area-medica"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response has the required fields - id, nome, and descricao', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.id).to.exist.and.to.be.a('number');",
									"        pm.expect(item.nome).to.exist.and.to.be.a('string');",
									"        pm.expect(item.descricao).to.exist.and.to.be.a('string');",
									"    });",
									"})",
									"",
									"pm.test('ID is a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"})",
									"",
									"pm.test('Descricao is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.descricao).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/area-medica",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"area-medica"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY ID ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.nome).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.descricao).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"ID is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Nome is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Descricao is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.descricao).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/area-medica/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"area-medica",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY nome ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, nome, and descricao\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.id).to.exist;",
									"        pm.expect(item.nome).to.exist;",
									"        pm.expect(item.descricao).to.exist;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Nome field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(1);",
									"  responseData.forEach(function (item) {",
									"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome field should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"The descricao field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.descricao).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/area-medica?nome=Neurologia",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"area-medica"
							],
							"query": [
								{
									"key": "nome",
									"value": "Neurologia"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "TODOS FUNCIONAM!\n\nRestrições:\n\nÉ proibido cadastrar 2 nomes iguais de áreas da saude."
		},
		{
			"name": "Plano de saúde",
			"item": [
				{
					"name": "POST pl-matheus ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.area).to.exist;",
									"    pm.expect(responseData.valor).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Validate the area object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.area).to.exist.and.to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.area.forEach(function(area) {",
									"        pm.expect(area).to.be.an('object');",
									"        pm.expect(area.id).to.exist.and.to.be.a('number');",
									"        pm.expect(area.nome).to.exist.and.to.be.a('string');",
									"        pm.expect(area.descricao).to.exist.and.to.be.a('string');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"The 'valor' field should be a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.valor).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.valor).to.be.at.least(0, \"Value should be non-negative\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"area\": [\r\n    {\"id\":1},\r\n    {\"id\":2},\r\n    {\"id\":3}\r\n    ],\r\n  \"valor\": 1900\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/plano-saude",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"plano-saude"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST pl-ana ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('id');",
									"  pm.expect(responseData).to.have.property('area');",
									"  pm.expect(responseData).to.have.property('valor');",
									"});",
									"",
									"",
									"pm.test(\"The 'valor' field is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.valor).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.valor).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"area\": [\r\n    {\"id\":1},\r\n    {\"id\":4}\r\n    ],\r\n  \"valor\": 800\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/plano-saude",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"plano-saude"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST pl-beatriz ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, area, and valor\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.area).to.exist;",
									"    pm.expect(responseData.valor).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"area\": [{\"id\":3}],\r\n  \"valor\": 200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/plano-saude",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"plano-saude"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Response has the correct Content-Type header', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Verify that the \\'id\\' field is a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/plano-saude",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"plano-saude"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY ID ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.area).to.exist;",
									"    pm.expect(responseData.valor).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"id should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Area is an array and is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.area).to.be.an('array', \"Area should be an array\");",
									"  pm.expect(responseData.area).to.have.lengthOf.at.least(1, \"Area should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/plano-saude/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"plano-saude",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"description": "TODOS FUNCIONAM!\n\nRestrições:\n\nNenhuma por enquanto."
		},
		{
			"name": "Paciente",
			"item": [
				{
					"name": "POST pac-matheus ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.pessoa.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is not valid\");",
									"});",
									"",
									"",
									"",
									"pm.test(\"Nascimento date is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.pessoa.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"Plano object contains a non-negative integer for the valor field\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.plano).to.be.an('object');",
									"    pm.expect(responseData.plano.valor).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.plano.valor).to.satisfy((value) => value >= 0, \"Value should be a non-negative integer\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userPaciente\": \"RM552295\",\r\n  \"senhaPaciente\": \"matheus@1\",\r\n  \"cpf\": \"440.837.228-51\",\r\n  \"pessoa\": {\"id\":1},\r\n  \"plano\": {\"id\":1},\r\n  \"historico\": {\"id\":1}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/paciente",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"paciente"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST pac-ana ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"  pm.expect(pm.response.json().pessoa.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
									"});\r",
									"\r",
									"pm.test(\"Plano object contains expected fields and values\", function () {\r",
									"  pm.expect(pm.response.json().plano).to.exist;\r",
									"  pm.expect(pm.response.json().plano.id).to.be.a('number');\r",
									"  pm.expect(pm.response.json().plano.area).to.be.an('array');\r",
									"  pm.response.json().plano.area.forEach(function(area) {\r",
									"      pm.expect(area.id).to.be.a('number');\r",
									"      pm.expect(area.nome).to.be.a('string');\r",
									"      pm.expect(area.descricao).to.be.a('string');\r",
									"  });\r",
									"});\r",
									"\r",
									"pm.test(\"Historico object contains expected fields and values\", function () {\r",
									"  pm.expect(pm.response.json().historico).to.be.an('object');\r",
									"  pm.expect(pm.response.json().historico).to.include.all.keys('id', 'doencas', 'doencasAnteriores', 'alergias', 'medicamento');\r",
									"});\r",
									"\r",
									"pm.test(\"Response Content-Type header is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Id, userPaciente, senhaPaciente, cpf, and pessoa object are present in the response\", function () {\r",
									"  pm.expect(pm.response.json()).to.be.an('object');\r",
									"  pm.expect(pm.response.json().id).to.exist;\r",
									"  pm.expect(pm.response.json().userPaciente).to.exist;\r",
									"  pm.expect(pm.response.json().senhaPaciente).to.exist;\r",
									"  pm.expect(pm.response.json().cpf).to.exist;\r",
									"  pm.expect(pm.response.json().pessoa).to.exist.and.to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Nascimento is in a valid date format\", function () {\r",
									"  pm.expect(pm.response.json().pessoa).to.be.an('object');\r",
									"  pm.expect(pm.response.json().pessoa.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userPaciente\": \"RM555555\",\r\n  \"senhaPaciente\": \"ana@1\",\r\n  \"cpf\": \"335.824.158-05\",\r\n  \"pessoa\": {\"id\":2},\r\n  \"plano\": {\"id\":2},\r\n  \"historico\": {\"id\":2}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/paciente",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"paciente"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST pac-beatriz ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.pessoa.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is not valid\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Nascimento date is in a valid date format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.pessoa.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Plano object contains a non-negative integer for the valor field\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.plano).to.be.an('object');\r",
									"    pm.expect(responseData.plano.valor).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.plano.valor).to.satisfy((value) => value >= 0, \"Value should be a non-negative integer\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userPaciente\": \"RM001122\",\r\n  \"senhaPaciente\": \"beatriz@1\",\r\n  \"cpf\": \"212.944.140-89\",\r\n  \"pessoa\": {\"id\":3},\r\n  \"plano\": {\"id\":3},\r\n  \"historico\": {\"id\":3}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/paciente",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"paciente"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.forEach(function(paciente) {\r",
									"        pm.expect(paciente.pessoa.email).to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/paciente",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"paciente"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY ID ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Pessoa object must exist and be an object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.pessoa).to.exist.and.to.be.an('object');",
									"});",
									"",
									"",
									"pm.test(\"Plano object should exist and be an object\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.plano).to.exist;",
									"  pm.expect(responseData.plano).to.be.an('object');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/paciente/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"paciente",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY cpf ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.forEach(function(paciente) {\r",
									"        pm.expect(paciente.pessoa.email).to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/paciente?cpf=440.837.228-51",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"paciente"
							],
							"query": [
								{
									"key": "cpf",
									"value": "440.837.228-51"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY userPaciente  ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.forEach(function(paciente) {\r",
									"        pm.expect(paciente.pessoa.email).to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/paciente?userPaciente=RM555555",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"paciente"
							],
							"query": [
								{
									"key": "userPaciente",
									"value": "RM555555"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "TODOS FUNCIONAM!\n\nRestrições:\n\nÉ necessário cadastrar e-mail, cpf e nome.\n\nCPF é um atributo UNICO, não podendo ser repetido, assim como userPaciente."
		},
		{
			"name": "Profissional da Saúde",
			"item": [
				{
					"name": "POST medica-mirelly ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Id field is present and a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"UserMedico and SenhaMedico are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.userMedico).to.be.a('string').and.to.have.lengthOf.at.least(1, \"UserMedico should not be empty\");",
									"    pm.expect(responseData.senhaMedico).to.be.a('string').and.to.have.lengthOf.at.least(1, \"SenhaMedico should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Pessoa object has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.pessoa).to.be.an('object');",
									"    pm.expect(responseData.pessoa.id).to.exist;",
									"    pm.expect(responseData.pessoa.nome).to.exist;",
									"    pm.expect(responseData.pessoa.email).to.exist;",
									"    pm.expect(responseData.pessoa.nascimento).to.exist;",
									"    pm.expect(responseData.pessoa.telefone).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Pacientes array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.pacientes).to.exist.and.to.be.an('array').that.is.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userMedico\": \"PF123456\",\r\n  \"senhaMedico\": \"mirelly@1\",\r\n  \"crm\": \"CRM/SP 123456\",\r\n  \"pessoa\": {\"id\":4},\r\n  \"pacientes\": [{\"id\":2},{\"id\":3},{\"id\":1}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/proficional-saude",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"proficional-saude"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"        ",
									"        if (item.pacientes) {",
									"            item.pacientes.forEach(function(paciente) {",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"            });",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');",
									"        ",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/proficional-saude",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"proficional-saude"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY ID ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('userMedico');",
									"    pm.expect(responseData).to.have.property('senhaMedico');",
									"    pm.expect(responseData).to.have.property('crm');",
									"    pm.expect(responseData).to.have.property('pessoa');",
									"    pm.expect(responseData).to.have.property('pacientes');",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Pessoa object has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.pessoa).to.be.an('object');",
									"    pm.expect(responseData.pessoa.id).to.exist;",
									"    pm.expect(responseData.pessoa.nome).to.exist;",
									"    pm.expect(responseData.pessoa.email).to.exist;",
									"    pm.expect(responseData.pessoa.nascimento).to.exist;",
									"    pm.expect(responseData.pessoa.telefone).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Validate the structure of the 'plano' object within the 'pacientes' array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.pacientes).to.be.an('array');",
									"    responseData.pacientes.forEach(function(paciente) {",
									"        pm.expect(paciente.plano).to.be.an('object');",
									"        pm.expect(paciente.plano.id).to.exist;",
									"        pm.expect(paciente.plano.area).to.exist;",
									"        pm.expect(paciente.plano.valor).to.exist;",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/proficional-saude/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"proficional-saude",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY crm ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {\r",
									"    pm.response.json().forEach(function(item) {\r",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);\r",
									"        \r",
									"        if (item.pacientes) {\r",
									"            item.pacientes.forEach(function(paciente) {\r",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');\r",
									"        \r",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/proficional-saude?crm=CRM/SP 123456",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"proficional-saude"
							],
							"query": [
								{
									"key": "crm",
									"value": "CRM/SP 123456"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET BY userMedico ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Email is in a valid format for medico and paciente\", function () {\r",
									"    pm.response.json().forEach(function(item) {\r",
									"        pm.expect(item.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);\r",
									"        \r",
									"        if (item.pacientes) {\r",
									"            item.pacientes.forEach(function(paciente) {\r",
									"                pm.expect(paciente.pessoa.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Nome should be a non-empty string for Medico and Paciente\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');\r",
									"        \r",
									"        pm.expect(item.pessoa).to.have.property('nome').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/proficional-saude?userMedico=PF123456",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"proficional-saude"
							],
							"query": [
								{
									"key": "userMedico",
									"value": "PF123456"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}